
package com.chatapp.services;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ChatService", targetNamespace = "http://services.chatapp.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ChatService {


    /**
     * 
     * @param threadID
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEntriesBasedOnThreadID", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetEntriesBasedOnThreadID")
    @ResponseWrapper(localName = "getEntriesBasedOnThreadIDResponse", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetEntriesBasedOnThreadIDResponse")
    @Action(input = "http://services.chatapp.com/ChatService/getEntriesBasedOnThreadIDRequest", output = "http://services.chatapp.com/ChatService/getEntriesBasedOnThreadIDResponse")
    public int getEntriesBasedOnThreadID(
        @WebParam(name = "threadID", targetNamespace = "")
        int threadID);

    /**
     * 
     * @return
     *     returns java.util.List<com.chatapp.services.ThreadTypeInfo>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllThreads", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetAllThreads")
    @ResponseWrapper(localName = "getAllThreadsResponse", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetAllThreadsResponse")
    @Action(input = "http://services.chatapp.com/ChatService/getAllThreadsRequest", output = "http://services.chatapp.com/ChatService/getAllThreadsResponse")
    public List<ThreadTypeInfo> getAllThreads();

    /**
     * 
     * @param title
     * @param userID
     */
    @WebMethod(operationName = "create_thread")
    @Oneway
    @RequestWrapper(localName = "create_thread", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.CreateThread")
    @Action(input = "http://services.chatapp.com/ChatService/create_thread")
    public void createThread(
        @WebParam(name = "title", targetNamespace = "")
        String title,
        @WebParam(name = "userID", targetNamespace = "")
        String userID);

    /**
     * 
     * @param threadID
     * @return
     *     returns com.chatapp.services.ThreadInfo
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastEditedEntryBasedOnThreadID", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetLastEditedEntryBasedOnThreadID")
    @ResponseWrapper(localName = "getLastEditedEntryBasedOnThreadIDResponse", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetLastEditedEntryBasedOnThreadIDResponse")
    @Action(input = "http://services.chatapp.com/ChatService/getLastEditedEntryBasedOnThreadIDRequest", output = "http://services.chatapp.com/ChatService/getLastEditedEntryBasedOnThreadIDResponse")
    public ThreadInfo getLastEditedEntryBasedOnThreadID(
        @WebParam(name = "threadID", targetNamespace = "")
        int threadID);

    /**
     * 
     * @param title
     * @param userID
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "threadTitleExists", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.ThreadTitleExists")
    @ResponseWrapper(localName = "threadTitleExistsResponse", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.ThreadTitleExistsResponse")
    @Action(input = "http://services.chatapp.com/ChatService/threadTitleExistsRequest", output = "http://services.chatapp.com/ChatService/threadTitleExistsResponse")
    public Boolean threadTitleExists(
        @WebParam(name = "title", targetNamespace = "")
        String title,
        @WebParam(name = "userID", targetNamespace = "")
        String userID);

    /**
     * 
     * @param addedDate
     * @param addedTime
     * @param message
     * @param userID
     * @param threadTypeID
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "sendMessage", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.SendMessage")
    @Action(input = "http://services.chatapp.com/ChatService/sendMessage")
    public void sendMessage(
        @WebParam(name = "threadTypeID", targetNamespace = "")
        int threadTypeID,
        @WebParam(name = "message", targetNamespace = "")
        String message,
        @WebParam(name = "userID", targetNamespace = "")
        String userID,
        @WebParam(name = "addedDate", targetNamespace = "")
        String addedDate,
        @WebParam(name = "addedTime", targetNamespace = "")
        String addedTime);

    /**
     * 
     * @param threadID
     * @return
     *     returns java.util.List<com.chatapp.services.ThreadInfo>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllThreadsBasedOnThreadID", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetAllThreadsBasedOnThreadID")
    @ResponseWrapper(localName = "getAllThreadsBasedOnThreadIDResponse", targetNamespace = "http://services.chatapp.com/", className = "com.chatapp.services.GetAllThreadsBasedOnThreadIDResponse")
    @Action(input = "http://services.chatapp.com/ChatService/getAllThreadsBasedOnThreadIDRequest", output = "http://services.chatapp.com/ChatService/getAllThreadsBasedOnThreadIDResponse")
    public List<ThreadInfo> getAllThreadsBasedOnThreadID(
        @WebParam(name = "threadID", targetNamespace = "")
        int threadID);

}
